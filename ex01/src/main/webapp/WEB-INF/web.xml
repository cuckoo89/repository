<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee https://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">

	<!-- The definition of the Root Spring Container shared by all Servlets and Filters -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/spring/root-context.xml</param-value>
	</context-param>
	
	<!-- Creates the Spring Container shared by all Servlets and Filters -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!-- Processes application requests -->
	<servlet>
		<servlet-name>appServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/spring/appServlet/servlet-context.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
		
	<servlet-mapping>
		<servlet-name>appServlet</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>

</web-app>

<!-- 프로젝트가 정상적으로 실행되었다면 서버의 구동 시 약간의 로그가 기록되는것을 볼 수 있다. 이 로그를 이용해서 어떤 과정을 통해서 프로젝트가 실행되는지를 엿볼 수 
있다. 프로젝트 구동 시 관여하는 xml은 web.xml, root-context.xml, servlet-context.xml 파일 입니다. 이 파일들 중 web.xml 은 톰켓 구동
관련 설정이고 나머지 두 파일은 스프링과 관련된 설정입니다.프로젝트의 구동은 web.xml에서 시작한다. web.xml의상단에는 가장먼저 구동되는  Context Listener
가 등록되어 있다.

<context-param> 에는root- context.xml 의 경로가 설정되어있고 <listener>에는 스프링 MVC의 ContextLoderListener 가 등록되어있는것을
볼 수 있다. ContextLoaderListner는 해당 웹 애플리케이션 구동 시 같이 동작하므로 해당 프로젝트를 실행하면 다음과같이 갖나가장먼저 로그를 출력하면서 기록
하는것을 볼 수 있다. root - context.xml이 처리되면 파일에 있는 빈 (Bean)설정들이 동작하게 된다. 이를 그림을 표현하면 다음과같이 표현할 수 있다.

root-context.xml에 정의된 객체(Bean)들은 스프링의 영역 (Context) 안에 생성되고. 객체들간의 읜존성이 처리된다. root-context.xml이 처리된
후에는 스프링 MVC에서 사용하는 DispatcherServlet 이라는 서블릿과 관련된 설정이 동작한다.

org.springframework.web.servlet.DispatcherServlet 클래스는 스프링 MVC의 구조에서 가장 핵심적인 역할을 하는 클래스이다. 내부적으로 웹관련
처리의 준비작업을 진행하는데 이때 사용하는 파일이 servlet-context.xml 이다. 프로젝트가 실행될때 로그의 일부를 보면 다음과 같다.
DispaecherServlet 에서 XmlWebApplicationContext 를 이용해서 servlet-context.xml 을 로딩하고 해석하기 시작한다 이 과정에서 등록된
(Bean) 들은 기존에 만들어진 객체(Bean)들과 같이 연동되게 된다-->
