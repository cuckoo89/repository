<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <mapper namespace="org.hide1989.mapper.TimeMapper">
  
  <select id="getTime2" resultType="string">
   SELECT sysdate FROM dual
   </select>
   
   
   </mapper>
  


<!-- xml 파일에는 MyBatis 의 XML 매퍼에서 이용하는 태그에 대한 설정이 필요하다. 이에대한 자세한 정보는 
 http://www.mybatis.org/mybatis-3/ko/sqlmap-xml/html 를 통해서 확인이 가능하다. Mapper 인터페이스와 XML 을 같이 이용해 보기 위해서
 기존의 TimeMapper 인터페이스에 추가적인 메서드를 선언한다. TimeMApper 인터페이스를 보면 GetTime 2()가 추가된 것을 볼 수 있는데 특이하게도
 @Select 와 같이 MyBatis 의 어노테이션이 존재하지 않고 SQL 역시 존재하지 않는 것을 볼 수 있다. 실제 SQL은 XML 을 이용해서 처리할 것이므로, 생성한
 TimeMapper.xml은 다음과 같이 작성한다 
 
 XML 매퍼를 이용할 때 신경써야 하는 부분은 <mapper> 태그의 namespace 속성값이다. Mybatis는 Mapper 인터페이스와 XML 을 인터페이스의 이름과
 namespace 속성값을 가지고 판단한다. 위와같이 org.hide1989.mapper.TimeMapper 인터페이스가 존재하고, XML 의 
 <Mapper namespace="org.hide1989.mapper.TimeMapper"> 와 같이 동일한 이름이 존재하면 이를 병합해서 처리한다. 따라서 위의경우 메서드
 선언은 인터페이스에 존재하고 SQL에 대한 처리는 XML을 이용하는 방식이라고 볼 수 있다.
 
 <select> 태그의 id 속성의 값은 메서드의 이름과 동일하게 맞춰야 한다. <select> 테그의 경우 resultType 속성을 가지는데 이 값은 인터페이스에 선언된
 메서드의 리턴타입과 동일하게 작성한다. 최종적인 확인을 위해서 TimeMapperTests 클래스를 이용해서 테스트 작업을 진행해야 한다.
 
 라이브러리를 추가한 후에는 로그설정 파일을 추가하는 작업과 JDBC의 연결정보를 수정해야한다. 우선 src/main/resource 밑에 log4jdbc.log4j2.properties
 파일을 추가한다
 -->